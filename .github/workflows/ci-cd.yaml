name: CI/CD Pipeline
on:
  push:
    branches:
      - main

jobs:
  pre-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if S3 buckets exist
        id: check-buckets
        run: |
          if aws s3api head-bucket --bucket caiua-localiza-terraform-challenge-state-bucket 2>/dev/null; then
            echo "bucket1_exists=true" >> $GITHUB_ENV
          else
            echo "bucket1_exists=false" >> $GITHUB_ENV
          fi
      
          if aws s3api head-bucket --bucket caiua-localiza-terraform-challenge-dns-state-bucket 2>/dev/null; then
            echo "bucket2_exists=true" >> $GITHUB_ENV
          else
            echo "bucket2_exists=false" >> $GITHUB_ENV
          fi
      
      - name: Initialize Terraform for S3
        if: ${{ env.bucket1_exists == 'false' || env.bucket2_exists == 'false' }}
        run: |
          cd bucket-tfstate
          terraform init
      
      - name: Apply Terraform (S3)
        if: ${{ env.bucket1_exists == 'false' || env.bucket2_exists == 'false' }}
        run: |
          cd bucket-tfstate
          terraform apply -auto-approve

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Apply Terraform (ECR only)
        run: |
          cd terraform
          terraform apply -target=aws_ecr_repository.myapp-repo -auto-approve

  build-and-push:
    runs-on: ubuntu-latest
    needs: pre-deploy
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
  
      - name: Install dependencies
        run: |
          cd flask-app
          python -m venv venv
          . venv/bin/activate
          pip install -r requirements.txt
  
      - name: Run tests
        id: run-tests
        run: |
          cd flask-app
          . venv/bin/activate
          pytest --junitxml=reports/test-results.xml --cov=.
  
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: flask-app/reports/test-results.xml
  
      - name: Upload coverage report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: flask-app/.coverage
  
      - name: Lint code
        run: |
          cd flask-app
          . venv/bin/activate
          flake8 *.py
  
      - name: Format code
        run: |
          cd flask-app
          . venv/bin/activate
          black --check *.py
  
      - name: Security check
        run: |
          cd flask-app
          . venv/bin/activate
          bandit -r *.py
  
      - name: Build Docker image
        if: steps.run-tests.outcome == 'success'
        run: |
          cd flask-app
          docker build -t my-flask-app:latest .
  
      - name: Login to Amazon ECR
        if: steps.run-tests.outcome == 'success'
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  
      - name: Tag Docker image
        if: steps.run-tests.outcome == 'success'
        run: |
          docker tag my-flask-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/myapp-prod:latest
  
      - name: Push Docker image to ECR
        if: steps.run-tests.outcome == 'success'
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/myapp-prod:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init

      - name: Apply Terraform
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Update kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name myapp

      - name: Check if namespace exists
        id: check-namespace
        run: |
          if kubectl get namespace myapp; then
            echo "namespace_exists=true" >> $GITHUB_ENV
          else
            echo "namespace_exists=false" >> $GITHUB_ENV
          fi

      - name: Create namespace if not exists
        if: ${{ env.namespace_exists == 'false' }}
        run: |
          kubectl create namespace myapp

      - name: Check if deployment exists
        id: check-deployment
        run: |
          if kubectl get deployment my-flask-app --namespace myapp; then
            echo "deployment_exists=true" >> $GITHUB_ENV
          else
            echo "deployment_exists=false" >> $GITHUB_ENV
          fi

      - name: Create deployment if not exists
        if: ${{ env.deployment_exists == 'false' }}
        run: |
          kubectl create deployment my-flask-app --image=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/myapp-prod:latest --namespace myapp

      - name: Check if service exists
        id: check-service
        run: |
          if kubectl get service my-flask-app --namespace myapp; then
            echo "service_exists=true" >> $GITHUB_ENV
          else
            echo "service_exists=false" >> $GITHUB_ENV
          fi

      - name: Create service if not exists
        if: ${{ env.service_exists == 'false' }}
        run: |
          kubectl expose deployment my-flask-app --type=LoadBalancer --port=80 --target-port=5000 --namespace myapp
        
      - name: Get Load Balancer Name and Hosted Zone ID
        run: |
          load_balancer_name=$(aws elb describe-load-balancers --region us-east-1 --query "LoadBalancerDescriptions[*].LoadBalancerName" --output text)
          hosted_zone_id=$(aws elb describe-load-balancers --region us-east-1 --query "LoadBalancerDescriptions[*].CanonicalHostedZoneNameID" --output text)
          echo "load_balancer_name=$load_balancer_name" >> $GITHUB_ENV
          echo "hosted_zone_id=$hosted_zone_id" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: |
          cd terraform/modules/dns-record
          terraform init

      - name: Export Terraform Variables and Apply
        run: |
          export TF_VAR_load_balancer_name="${{ env.load_balancer_name }}"
          export TF_VAR_hosted_zone_id="${{ env.hosted_zone_id }}"
          export TF_VAR_account_id="${{ secrets.AWS_ACCOUNT_ID }}"
          cd terraform/modules/dns-record
          terraform apply -auto-approve